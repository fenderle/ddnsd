#!/usr/bin/perl -w
#
# Copyright (c) 2011, Frank Enderle, anamica GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions 
# are met:
#
# Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in 
# the documentation and/or other materials provided with the 
# distribution.
#
# Neither the name of the anamica GmbH nor the names of its 
# contributors may be used to endorse or promote products derived 
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
use strict;

use Config::IniHash;
use Getopt::Long qw(:config no_ignore_case);
use Unix::Syslog qw(:macros :subs);
use IO::File;
use Net::DNS;
use Net::IP;
use IPC::Open3;
use IO::Select;
use Pod::Usage;

my $VERSION = "1.0.1";

# init syslog
openlog("ddnsd", LOG_PID, LOG_DAEMON);

# process commandline arguments and configuration
my $par = processArgs() || error("error processing arguments") && exit(-1);
my $cfg = processConfig() || error("error reading configuration") && exit(-1);

# help requested?
if($par->{help}) {
    pod2usage(0);
}

# mangle arguments into config
if($par->{daemon} != -1) { $cfg->{global}->{daemon} = $par->{daemon} ? 1 : 0; }
if($par->{debug}  != -1) { $cfg->{global}->{debug}  = $par->{debug}  ? 1 : 0; }

# daemon mode?
if($cfg->{global}->{daemon}) {
    # check we are not already running
    if(isRunning()) {
        error("ddnsd is already running") && exit(-1);
    }

    # detach
    my $pid = fork();
    if($pid < 0) {
        error("can't fork") && exit(-1);
    } elsif($pid > 0) {
        exit(0);
    }

    # setup child signal handlers
    my $got_HUP  = 0;
    my $got_TERM = 0;
    my $got_KILL = 0;

    $SIG{HUP}  = sub { $got_HUP  = 1; };
    $SIG{TERM} = sub { $got_TERM = 1; };
    $SIG{KILL} = sub { $got_KILL = 1; };

    # write pidfile
    if(!writePid()) {
        error("can't write pidfile") && exit(-1);
    }

    # close console channels
    open(STDOUT, ">/dev/null");
    open(STDERR, ">/dev/null");
    open(STDIN, "</dev/null");

    # say hello...
    info("ddnsd version $VERSION started");

    # enter processing loop...
    while(!$got_TERM && !$got_KILL) {
        # first thing: update the ip
        performUpdate($cfg);

        # wait...
        my $left = $cfg->{global}->{interval};
        while($left > 0 && !$got_HUP && !$got_TERM && !$got_KILL) {
            my $delay = $left > 10 ? 10 : $left;
            $0 = sprintf("ddnsd - sleeping for %s seconds", $left);
            $left -= sleep($delay);
        }

        # check for HUP signal
        if($got_HUP) {
            $got_HUP = 0;

            info("got HUP - updating now");
        }
    }

    info("shutting down on signal");
} else {
    performUpdate($cfg);
}

closelog();
exit(0);

sub debug {
    # write debug to syslog and console (in daemon mode there's no STDERR)
    my $message = shift;

    if($cfg->{global}->{debug}) {
        syslog(LOG_DEBUG, $message);
        print(STDERR $message . "\n");
    }

    return 1;
}

sub error {
    # write error to syslog and console (in daemon mode there's no STDERR)
    my $message = shift;

    syslog(LOG_ERR, $message);
    print(STDERR $message . "\n");

    return 1;
}

sub info {
    # write info to syslog and console (in daemon mode there's no STDOUT)
    my $message = shift;

    syslog(LOG_INFO, $message);
    print($message . "\n");

    return 1;
}

sub processArgs {
    # command line defaults
    my %par = (
        config => "/etc/ddnsd/ddnsd.conf",
        daemon => -1,
        debug  => -1,
        force  => 0,
        help   => 0
    );
    
    # process command line options
    if(!GetOptions("config|c=s" => \$par{config},
                   "daemon|d"   => \$par{daemon},
                   "debug|D"    => \$par{debug},
                   "force|f"    => \$par{force},
                   "help|h"     => \$par{help}
                  )) {
        return;
    }
    
    return \%par;
}

sub processConfig {
    # read config and setup vars
    my $cfg = ReadINI($par->{config}, { 
        allow_multiple => { "ipcheck" => [ "arg" ] }
    }) || return;
    
    # defaults
    $cfg->{global}->{modules}  = $cfg->{global}->{modules}  || "/etc/ddnsd/modules";
    $cfg->{global}->{pidfile}  = $cfg->{global}->{pidfile}  || "/var/run/ddnsd/ddnsd.pid";
    $cfg->{global}->{daemon}   = ($cfg->{global}->{daemon}  || "false") eq "true" ? 1 : 0;
    $cfg->{global}->{debug}    = ($cfg->{global}->{debug}   || "false") eq "true" ? 1 : 0;
    $cfg->{global}->{interval} = $cfg->{global}->{interval} || 300;
    $cfg->{ipcheck}->{arg}     = $cfg->{ipcheck}->{arg}     || [];
    
    if(!$cfg->{ipcheck}->{module}) {
        $cfg->{ipcheck}->{module} = "url";
        $cfg->{ipcheck}->{arg}    = [ "http://checkip.dyndns.org", "Current IP Address: ([\\d\\.]+)" ];
    }
    
    return $cfg;
}

sub isRunning {
    # check for pid file
    my $fh = IO::File->new($cfg->{global}->{pidfile});
    if($fh) {
        my $pid = <$fh>;
        chomp($pid);
        $fh->close();

        # check if pid is stale
        if(kill(0, $pid) > 0) {
            return $pid;
        }
    }

    # not running
    return;
}

sub writePid {
    # write new pid
    my $fh = IO::File->new(">" . $cfg->{global}->{pidfile}) || return;
    if($fh) {
        $fh->print("$$\n");
        $fh->close();
    }

    return 1;
}

sub performUpdate {
    # get the ip address
    my $ips = getIP() || error("can't determine ip") && return;

    foreach my $record (keys(%{$cfg})) {
        if($record eq "global")  { next; }
        if($record eq "ipcheck") { next; }

        # ensure the hash is set
        my $zone    = $cfg->{$record}->{zone} || getAutoZone($record) || error("$record: no zone") && next;
        my $server  = $cfg->{$record}->{server} || getAutoServer($zone) || error("$record: no name server") && next;
        my $kname   = $cfg->{$record}->{keyname} || $record;
        my $ksecret = $cfg->{$record}->{keysecret} || "";
        my $ttl     = $cfg->{$record}->{ttl} || 600;
        my @cips    = ();

        # load the current dns entries for the record
        my $res = Net::DNS::Resolver->new() || next;
        $res->nameserver($server);

        my $qry = $res->search($record) || next;
        foreach my $rr ($qry->answer) {
            if($rr->type eq "A" || $rr->type eq "AAAA") { 
                push(@cips, Net::IP->new($rr->address)); 
            }
        }

        # do the update
        foreach my $ip (@{$ips}) {
            my $type = $ip->version() == 4 ? "A" : "AAAA";

            # check if the ip is already set
            if(!$par->{force} && scalar grep { $ip->ip() eq $_->ip() } @cips) {
                debug("$record: no update required (" . $ip->ip() . ")");
                next; 
            }

            # create update
            my $update = Net::DNS::Update->new($zone);
            $update->push(update => rr_del("$record NONE $type"));
            $update->push(update => rr_add("$record $ttl $type " . $ip->ip()));
    
            # sign request
            if($ksecret ne "") {
                $update->sign_tsig($kname, $ksecret);
            }

            my $reply = $res->send($update) || error("$record: can't send update request") && next;
            if($reply->header->rcode ne "NOERROR") {
                error("$record: update failed (" . $ip->ip() . "): " . $reply->header->rcode) && next;
            }
    
            info("$record: successful $type update (" . $ip->ip() . ")");
        }
    }
}

sub getIP {
    # find our ip using a module
    my @result;

    # check that the module exists
    my $module = $cfg->{global}->{modules} . "/ipcheck." . $cfg->{ipcheck}->{module};
    if(!-x $module) {
        error("module not found or not executeable: $module");
        return;
    }

    # do IPC to the module, capture stdout and stderr
    local (*CMD_IN, *CMD_OUT, *CMD_ERR);
    my $pid = open3(*CMD_IN, *CMD_OUT, *CMD_ERR, $module, @{$cfg->{ipcheck}->{arg}});
    if(!$pid) {
        error("cannot exec module: $module");
        return;
    }

    # no stdin required
    close(CMD_IN);

    my $select = IO::Select->new();
    $select->add(*CMD_OUT, *CMD_ERR);
    while(my @ready = $select->can_read) {
        foreach my $fh (@ready) {
            # check eof and close channel
            if(eof($fh)) {
                $select->remove($fh);
                next;
            }

            # read the line, remove linebreaks
            my $line = <$fh>;
            $line =~ s/(\r|\n)//g;

            if(fileno($fh) == fileno(CMD_ERR)) { 
                # log the error
                info("$module STDERR: $line");
            } else {
                # extract the address
                debug("$module STDOUT: $line");
                my $ip = Net::IP->new($line) || error(Net::IP::Error() . ": $line") && next;
                push(@result, $ip);
                debug("$module IPV" . $ip->version() . ": " . $ip->ip());
            }

        }
    }
   
    close(CMD_OUT);
    close(CMD_ERR);
 
    waitpid($pid, 0);

    return \@result;
}

sub getAutoZone {
    # automatically determine zone from dns entry
    my $record = shift;

    # iteratively go through the dns name and find the first NS
    my $res = Net::DNS::Resolver->new();

    while($record ne "") {
        my $response = $res->query($record, "NS");
        if($response) {
            return $record;
        }

        $record =~ s/^[^\.]+\.?//g;
    }

    return;
}

sub getAutoServer {
    # automatically determine nameserver from zone
    my $zone = shift;

    # request SOA for zone
    my $res = Net::DNS::Resolver->new();
    my $response = $res->query($zone, "SOA") || return;

    # return the primary dns if available
    foreach my $rr (grep {$_->type() eq "SOA"} $response->answer) {
        return $rr->mname;
    }

    return;
}

__END__

=head1 NAME

ddnsd - a dynamic dns update daemon

=head1 SYNOPSIS

ddnsd [options]

=head1 OPTIONS

=over

=item B<-c, --config=FILE>

Defines the location of the configuration file. The configuration file 
uses the INI format and defines besides some general configuration the 
domain names to update.

=item B<-f, --force>

Disable the check if the IP address has changed.

=item B<-d, --daemon>

Run ddnsd in daemon mode. This is useful if you want ddnsd to stay in 
the background and periodically check the IP addresses. If it detects 
a change it will issue the ddns updates to reflect the IP change on 
the name server.

=item B<-D, --debug>

Enables some debug output. If ddnsd runs in daemon mode the output will 
be sent to syslog (daemon.debug)

=item B<-h, --help>

Show a little wrap up on how to use ddnsd.

=back

=head1 DESCRIPTION

ddnsd is a dynamic dns updater. It's purpose is to keep the DNS record
for systems in sync with the system's IP address. This is particulary
useful if the system runs on an dynamic IP address.

ddnsd supports IPv4 and IPv6 addresses. It also supports TSIG to sign
the DNS updates with a key (which is what you want if you run your DNS
on the internet).

=head1 CONFIGURATION

Ths INI style configuration consists of the following sections:

=over

=item B<[global]>

=over

=item B<modules (default: /etc/ddnsd/modules)>

Path to the modules directory. ddnsd searches this directory if it 
loads a module. The modules are prefixed with their type to avoid 
naming clashes. Currently only ipcheck modules exist.

=item B<pidfile (default: /var/run/ddnsd/ddnsd.pid)>

The location of the pid file if ddnsd runs in daemon mode.

=item B<daemon (default: false)>

Set this to B<true> to enable daemon mode. This setting can be 
overridden by the command line argument B<--daemon>.

=item B<debug (default: false)>

Set this to B<true> to enable debug output. In daemon mode the output
is sent to syslog, in standalone mode it's sent to STDERR. This
setting can be overridden by the command line argument B<--debug>.

=item B<interval (default: 300)>

Only valid in daemon mode. Specifies the number of seconds to wait
between updates.

=back

=item B<[ipcheck]>

=over

=item B<module (default: url)>

The module to use for IP determination.

=item B<arg (default: http://checkip.dyndns.org, Current IP Address: ([\d\.]+))>

The module's arguments. This option must appear once for every 
argument to the module (first occurance is first argument, second
occurance the second argument, and so on...)

=back

=item B<[host.domain.foo]>

All other sections specify a domain name as the section title. This
domain name is the one which is going to be updated.

=over

=item B<ttl (default: 600)>

Specifies the TTL for the A or AAAA record.

=item B<zone (default: autodetect)>

The DNS zone to update. If this option is omitted ddnsd tries to 
detect the zone automatically. Therefore a NS lookup is issued using 
the section name. If this fails the first part of the section name
is stripped and the lookup is executed again with the modified 
section name. This repeats until a valid NS is found or the section
name is processed entirely (which will result in an error).

=item B<server (default: autodetect)>

The zone's primary DNS server which should receive the update request.
If omitted ddns tries to detect the server by running an SOA request
on the zone and then uses the nameserver stated on the SOA.

=item B<keyname (default: secion name)>

The keyname to use if the request is going to be signed using TSIG.

=item B<keysecret (default: none)>

If the option is set ddns uses TSIG and the keyname to sign the
update request. The key can be generated using B<dnssec-keygen>. E.g.

dnssec-keygen -a HMAC-MD5 -b 512 -n HOST host.domain.foo.

=back 

=back

=head1 MODULES

ddnsd uses modules to check for the current system IP. The module is
called with the arguments supplied in the configuration file. While
runtime the module then finds the IPv4 or IPv6 address and just outputs
it to STDOUT. ddnsd will automatically recognize IPv4 or IPv6 addresses
and generate an appropriate A or AAAA update request. 

ddnsd comes with two modules:

=over

=item B<url [url] [regex]>

Performs a HTTP GET request on the supplied B<url> and runs the result
against the B<regex> which must define a reference. On a successful
match the reference is used as the IP address.

This module is IPv4 only.

=item B<interface [if]>

Check the interface B<if> of the system for it's IP address and uses 
this address to update the DNS record.

This module is IPv4 only.

=back

=head1 SIGNALS

B<SIGHUP> can be used in daemon mode to force an immediate check.

=cut
